// src/utils/object.ts
var isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
var mergeObjects = (target, source) => {
  const merged = Object.assign({}, target);
  if (isObject(target) && isObject(source)) {
    for (const key of Object.keys(source)) {
      if (isObject(source[key])) {
        if (target[key] === void 0)
          Object.assign(merged, { [key]: source[key] });
        else
          merged[key] = mergeObjects(target[key], source[key]);
      } else if (Array.isArray(source[key]) && Array.isArray(target[key])) {
        const srcArr = source[key];
        const tgtArr = target[key];
        const outArr = [];
        for (let i = 0; i < srcArr.length; i += 1) {
          if (isObject(srcArr[i]) && isObject(tgtArr[i])) {
            outArr[i] = mergeObjects(tgtArr[i], srcArr[i]);
          } else {
            outArr[i] = srcArr[i];
          }
        }
        Object.assign(merged, { [key]: outArr });
      } else {
        Object.assign(merged, { [key]: source[key] });
      }
    }
  }
  return merged;
};
export {
  isObject,
  mergeObjects
};
