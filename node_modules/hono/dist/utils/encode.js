// src/utils/encode.ts
var encodeBase64 = (str) => {
  if (str === null) {
    throw new TypeError('1st argument of "encodeBase64" should not be null.');
  }
  try {
    const encoder = new TextEncoder();
    const bytes = encoder.encode(str);
    return btoa(String.fromCharCode(...bytes));
  } catch {
  }
  try {
    return Buffer.from(str).toString("base64");
  } catch (e) {
    console.error('If you want to do "encodeBase64", polyfill "buffer" module.');
    throw e;
  }
};
var decodeBase64 = (str) => {
  if (str === null) {
    throw new TypeError('1st argument of "decodeBase64" should not be null.');
  }
  try {
    const text = atob(str);
    const bytes = new Uint8Array(text.split("").map((c) => c.charCodeAt(0)));
    const decoder = new TextDecoder();
    return decoder.decode(bytes);
  } catch {
  }
  try {
    return Buffer.from(str, "base64").toString();
  } catch (e) {
    console.error('If you want to do "decodeBase64", polyfill "buffer" module.');
    throw e;
  }
};
var encodeBase64URL = (str) => {
  return encodeBase64(str).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
};
var decodeBase64URL = (str) => {
  const pad = (s) => {
    const diff = s.length % 4;
    if (diff === 2) {
      return `${s}==`;
    }
    if (diff === 3) {
      return `${s}=`;
    }
    return s;
  };
  return decodeBase64(pad(str).replace(/-/g, "+").replace("_", "/"));
};
var utf8ToUint8Array = (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str);
};
var arrayBufferToBase64 = async (buf) => {
  if (typeof btoa === "function") {
    return btoa(String.fromCharCode(...new Uint8Array(buf)));
  }
  try {
    return Buffer.from(String.fromCharCode(...new Uint8Array(buf))).toString("base64");
  } catch (e) {
  }
  return "";
};
var arrayBufferToBase64URL = async (buf) => {
  return (await arrayBufferToBase64(buf)).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
};
export {
  arrayBufferToBase64,
  arrayBufferToBase64URL,
  decodeBase64,
  decodeBase64URL,
  encodeBase64,
  encodeBase64URL,
  utf8ToUint8Array
};
