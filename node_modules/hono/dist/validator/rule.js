// src/validator/rule.ts
var rule = {
  isEmpty(value, options = { ignore_whitespace: false }) {
    if (value === void 0)
      return false;
    return (options.ignore_whitespace ? value.trim().length : value.length) === 0;
  },
  isLength: (value, options, arg2) => {
    if (value === void 0)
      return false;
    let min;
    let max;
    if (typeof options === "object") {
      min = options.min || 0;
      max = options.max;
    } else {
      min = options || 0;
      max = arg2;
    }
    const presentationSequences = value.match(/(\uFE0F|\uFE0E)/g) || [];
    const surrogatePairs = value.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
    const len = value.length - presentationSequences.length - surrogatePairs.length;
    return len >= min && (typeof max === "undefined" || len <= max);
  },
  isAlpha: (value) => {
    if (value === void 0)
      return false;
    return /^[A-Z]+$/i.test(value);
  },
  isNumeric: (value) => {
    if (value === void 0)
      return false;
    return /^[0-9]+$/.test(value);
  },
  contains: (value, elem, options = {
    ignoreCase: false,
    minOccurrences: 1
  }) => {
    if (value === void 0 || elem === void 0)
      return false;
    options.ignoreCase || (options.ignoreCase = false);
    options.minOccurrences || (options.minOccurrences = 1);
    if (options.ignoreCase) {
      return value.toLowerCase().split(elem.toLowerCase()).length > options.minOccurrences;
    }
    return value.split(elem).length > options.minOccurrences;
  },
  isIn: (value, options) => {
    if (value === void 0)
      return false;
    if (typeof options === "object") {
      for (const elem of options) {
        if (elem === value)
          return true;
      }
    }
    return false;
  },
  match: (value, regExp) => {
    if (value === void 0 || regExp === void 0)
      return false;
    return regExp.test(value);
  },
  isGte: (value, min) => min <= value,
  isLte: (value, max) => value <= max,
  isTrue: (value) => value === true,
  isFalse: (value) => value === false
};
export {
  rule
};
