"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var router_exports = {};
__export(router_exports, {
  StaticRouter: () => StaticRouter
});
module.exports = __toCommonJS(router_exports);
var import_router = require("../../router");
class StaticRouter {
  constructor() {
    this.middleware = {};
    this.routes = {};
    [import_router.METHOD_NAME_ALL, ...import_router.METHODS].forEach((method) => {
      this.routes[method.toUpperCase()] = {};
    });
  }
  newRoute() {
    const route = {};
    const routeAll = this.routes[import_router.METHOD_NAME_ALL];
    Object.keys(routeAll).forEach((path) => {
      route[path] = {
        handlers: [...routeAll[path].handlers],
        params: {}
      };
    });
    return route;
  }
  add(method, path, handler) {
    var _a, _b;
    const { middleware, routes } = this;
    routes[method] || (routes[method] = this.newRoute());
    if (path === "/*") {
      path = "*";
    }
    if (path === "*") {
      if (method === import_router.METHOD_NAME_ALL) {
        middleware[_a = import_router.METHOD_NAME_ALL] || (middleware[_a] = { handlers: [], params: {} });
        Object.keys(middleware).forEach((m) => {
          middleware[m].handlers.push(handler);
        });
        Object.keys(routes).forEach((m) => {
          Object.values(routes[m]).forEach((matchRes) => matchRes.handlers.push(handler));
        });
      } else {
        middleware[method] || (middleware[method] = {
          handlers: [...middleware[import_router.METHOD_NAME_ALL]?.handlers || []],
          params: {}
        });
        middleware[method].handlers.push(handler);
        if (routes[method]) {
          Object.values(routes[method]).forEach((matchRes) => matchRes.handlers.push(handler));
        }
      }
      return;
    }
    if (/\*|\/:/.test(path)) {
      throw new import_router.UnsupportedPathError(path);
    }
    (_b = routes[method])[path] || (_b[path] = {
      handlers: [
        ...routes[import_router.METHOD_NAME_ALL][path]?.handlers || middleware[method]?.handlers || middleware[import_router.METHOD_NAME_ALL]?.handlers || []
      ],
      params: {}
    });
    if (method === import_router.METHOD_NAME_ALL) {
      Object.keys(routes).forEach((m) => {
        routes[m][path]?.handlers?.push(handler);
      });
    } else {
      routes[method][path].handlers.push(handler);
    }
  }
  match(method, path) {
    const { routes, middleware } = this;
    this.match = (method2, path2) => routes[method2][path2] || routes[import_router.METHOD_NAME_ALL][path2] || middleware[method2] || middleware[import_router.METHOD_NAME_ALL] || null;
    return this.match(method, path);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  StaticRouter
});
