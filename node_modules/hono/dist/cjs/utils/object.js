"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var object_exports = {};
__export(object_exports, {
  isObject: () => isObject,
  mergeObjects: () => mergeObjects
});
module.exports = __toCommonJS(object_exports);
const isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
const mergeObjects = (target, source) => {
  const merged = Object.assign({}, target);
  if (isObject(target) && isObject(source)) {
    for (const key of Object.keys(source)) {
      if (isObject(source[key])) {
        if (target[key] === void 0)
          Object.assign(merged, { [key]: source[key] });
        else
          merged[key] = mergeObjects(target[key], source[key]);
      } else if (Array.isArray(source[key]) && Array.isArray(target[key])) {
        const srcArr = source[key];
        const tgtArr = target[key];
        const outArr = [];
        for (let i = 0; i < srcArr.length; i += 1) {
          if (isObject(srcArr[i]) && isObject(tgtArr[i])) {
            outArr[i] = mergeObjects(tgtArr[i], srcArr[i]);
          } else {
            outArr[i] = srcArr[i];
          }
        }
        Object.assign(merged, { [key]: outArr });
      } else {
        Object.assign(merged, { [key]: source[key] });
      }
    }
  }
  return merged;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  isObject,
  mergeObjects
});
