import type { ExecutionContext } from './types';
import type { Environment, NotFoundHandler, ContextVariableMap } from './types';
import type { CookieOptions } from './utils/cookie';
import type { StatusCode } from './utils/http-status';
import type { Schema, SchemaToProp } from './validator/schema';
declare type Headers = Record<string, string | string[]>;
declare type Runtime = 'node' | 'deno' | 'bun' | 'cloudflare' | 'fastly' | 'vercel' | 'lagon' | 'other';
export declare type Data = string | ArrayBuffer | ReadableStream;
export declare class Context<P extends string = string, E extends Partial<Environment> = Environment, S = any> {
    req: Request<unknown, P, S extends Schema ? SchemaToProp<S> : S>;
    env: E['Bindings'];
    finalized: boolean;
    error: Error | undefined;
    private _status;
    private _executionCtx;
    private _pretty;
    private _prettySpace;
    private _map;
    private _headers;
    private _res;
    private notFoundHandler;
    constructor(req: Request<unknown, P>, env?: E['Bindings'], executionCtx?: FetchEvent | ExecutionContext | undefined, notFoundHandler?: NotFoundHandler<E>);
    get event(): FetchEvent;
    get executionCtx(): ExecutionContext;
    get res(): Response;
    set res(_res: Response);
    header(name: string, value: string, options?: {
        append?: boolean;
    }): void;
    status(status: StatusCode): void;
    set<Key extends keyof ContextVariableMap>(key: Key, value: ContextVariableMap[Key]): void;
    set<Key extends keyof E['Variables']>(key: Key, value: E['Variables'][Key]): void;
    set(key: string, value: unknown): void;
    get<Key extends keyof ContextVariableMap>(key: Key): ContextVariableMap[Key];
    get<Key extends keyof E['Variables']>(key: Key): E['Variables'][Key];
    get<T>(key: string): T;
    pretty(prettyJSON: boolean, space?: number): void;
    newResponse(data: Data | null, status: StatusCode, headers?: Headers): Response;
    private _finalizeHeaders;
    body(data: Data | null, status?: StatusCode, headers?: Headers): Response;
    text(text: string, status?: StatusCode, headers?: Headers): Response;
    json<T>(object: T, status?: StatusCode, headers?: Headers): Response;
    html(html: string, status?: StatusCode, headers?: Headers): Response;
    redirect(location: string, status?: StatusCode): Response;
    cookie(name: string, value: string, opt?: CookieOptions): void;
    notFound(): Response | Promise<Response>;
    get runtime(): Runtime;
}
export {};
